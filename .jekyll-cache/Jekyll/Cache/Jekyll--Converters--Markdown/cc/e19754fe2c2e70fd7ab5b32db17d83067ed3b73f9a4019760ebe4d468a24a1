I"|x<p>整理自小甲鱼<a href="https://fishc.com.cn/">鱼C论坛</a></p>
<h3 id="组合">组合</h3>

<p>所谓”组合”，可以理解为相对于继承来讲的一个概念。有些时候，利用多重继承本身除了存在风险的同时，在有些时候，如果类本身并不存在明显的相互继承关系，强行继承会很别扭。比如定义了两个类，小鸟和老鹰后，我们想定义一个新的类，天空，天空中包含小鸟和老鹰，奈何天空和小鸟和老鹰本身并不存在继承关系，这时就适合用组合来解决这个问题。</p>

<p>当执行组合时，<strong>我们将需要的类放进目的类中进行实例化</strong>，就可以实现组合，例如代码：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Bird</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">num</span> <span class="o">=</span> <span class="n">x</span>

<span class="k">class</span> <span class="nc">Eagle</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">num</span> <span class="o">=</span> <span class="n">x</span>

<span class="k">class</span> <span class="nc">Sky</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">bird</span>  <span class="o">=</span> <span class="n">Bird</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">eagle</span> <span class="o">=</span> <span class="n">Eagle</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">print_num</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="c1"># 这里print的对象为self.bird.num以及self.eagle.num，为与当前类无继承关系的类的实例化对象的属性。
</span>    <span class="k">print</span><span class="p">(</span><span class="s">"天空中共有小鸟 %d只，老鹰 %d只"</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">bird</span><span class="p">.</span><span class="n">num</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">eagle</span><span class="p">.</span><span class="n">num</span><span class="p">))</span>
</code></pre></div></div>

<p>将几个不是很有继承关系的（横向关系）的几个类放在一起，我们称之为<strong>组合</strong>。如果几个类之间的纵向关系，我们就可以使用继承。</p>

<p>除了组合以外，还有另外一种很流行的编程模式，叫做Mixin。</p>

<h3 id="mixin">Mixin</h3>

<p>Mixin编程是一种开发模式，是一种将多个类中的功能单元的进行组合的利用的方式。<strong>通常Mixin不作为任何类的基类，也不关心与什么类一起使用，而是在运行时动态的同其他零散的类一起组合使用</strong>。</p>

<p>其具有以下有点：</p>

<ol>
  <li>可以在不修改任何源代码的情况下，对已有类进行扩展；</li>
  <li>可以保证组件的划分；</li>
  <li>可以根据需要，使用已有的功能进行组合，来实现“新”类；</li>
  <li>很好的避免了类继承的局限性，因为新的业务需要，可能就意味着需要创建新的子类</li>
</ol>

<p>代码示例：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">A</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">GetA</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'a'</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">B</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">GetB</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'b'</span><span class="p">)</span>
  <span class="c1"># 这里应用的是python的多继承机制
</span><span class="k">class</span> <span class="nc">C</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">):</span> <span class="k">pass</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">A</span><span class="p">()</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">B</span><span class="p">()</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">C</span><span class="p">()</span>
<span class="n">c</span><span class="p">.</span><span class="n">GetA</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span><span class="n">a</span>
<span class="n">c</span><span class="p">.</span><span class="n">GetB</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span><span class="n">b</span>

  <span class="c1"># 下面使用Mixin的方法
</span>
<span class="k">class</span> <span class="nc">A</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">GetA</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'a'</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">B</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">GetB</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'b'</span><span class="p">)</span>
  <span class="c1"># 这里应用的是python的多继承机制
</span>  <span class="c1"># 下面使用Mixin的方法
</span>
<span class="k">class</span> <span class="nc">C</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="n">C</span><span class="p">.</span><span class="n">__bases__</span> <span class="o">=</span> <span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">)</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">A</span><span class="p">()</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">B</span><span class="p">()</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">C</span><span class="p">()</span>
<span class="n">c</span><span class="p">.</span><span class="n">GetA</span><span class="p">()</span>
<span class="n">c</span><span class="p">.</span><span class="n">GetB</span><span class="p">()</span>

 <span class="c1"># 结果输出
</span><span class="o">&gt;&gt;&gt;</span>
<span class="n">a</span>
<span class="n">b</span>

 <span class="c1"># 利用__base__，我们可以通过C.__bases__来进行控制继承
</span> <span class="c1"># 如下
</span>
<span class="n">C</span><span class="p">.</span><span class="n">__base__</span> <span class="o">=</span> <span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="nb">object</span><span class="p">)</span>    <span class="c1"># 如果元祖中只有一个元素在后面加object
</span><span class="n">a</span> <span class="o">=</span> <span class="n">A</span><span class="p">()</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">B</span><span class="p">()</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">C</span><span class="p">()</span>
<span class="n">c</span><span class="p">.</span><span class="n">GetA</span><span class="p">()</span>
<span class="n">c</span><span class="p">.</span><span class="n">GetB</span><span class="p">()</span>

 <span class="c1"># 输出结果
</span><span class="nb">AttributeError</span><span class="p">:</span> <span class="s">'C'</span> <span class="nb">object</span> <span class="n">has</span> <span class="n">no</span> <span class="n">attribute</span> <span class="s">'GetB'</span>
</code></pre></div></div>

<p>我们也可以通过<code class="language-plaintext highlighter-rouge">__base__ += calss</code>来对目标类进行拓展。如下代码：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">A</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">GetA</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'a'</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">B</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">GetB</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'b'</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">C</span><span class="p">(</span><span class="n">A</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="n">C</span><span class="p">.</span><span class="n">__base__</span> <span class="o">+=</span> <span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="nb">object</span><span class="p">)</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">A</span><span class="p">()</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">B</span><span class="p">()</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">C</span><span class="p">()</span>
<span class="n">c</span><span class="p">.</span><span class="n">GetA</span><span class="p">()</span>
<span class="n">c</span><span class="p">.</span><span class="n">GetB</span><span class="p">()</span>

 <span class="c1"># 结果输出
</span><span class="o">&gt;&gt;&gt;</span>
<span class="n">a</span>
<span class="n">b</span>
</code></pre></div></div>

<h3 id="类类对象和实例对象">类、类对象和实例对象</h3>

<p>我们在类中定义的属性是静态的变量，相当于C语言的static关键字，<strong>类的属性是与类对象进行绑定，并不会依赖与任何实例对象</strong>。</p>

<p>那么下面就会衍生出一个问题，如果实例对象中属性的名字和类对象的属性名重复了会怎么样呢？</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">C</span><span class="p">:</span>
        <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>

<span class="o">&gt;&gt;&gt;</span><span class="n">a</span> <span class="o">=</span> <span class="n">C</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span><span class="n">b</span> <span class="o">=</span> <span class="n">C</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span><span class="n">c</span> <span class="o">=</span> <span class="n">C</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span><span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">count</span><span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="n">count</span><span class="p">,</span> <span class="n">c</span><span class="p">.</span><span class="n">count</span><span class="p">)</span>
<span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span>
<span class="o">&gt;&gt;&gt;</span><span class="n">c</span><span class="p">.</span><span class="n">count</span> <span class="o">+=</span> <span class="mi">10</span>
<span class="o">&gt;&gt;&gt;</span><span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">count</span><span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="n">count</span><span class="p">,</span> <span class="n">c</span><span class="p">.</span><span class="n">count</span><span class="p">)</span>
<span class="mi">0</span> <span class="mi">0</span> <span class="mi">10</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">C</span><span class="p">.</span><span class="n">count</span> <span class="o">+=</span> <span class="mi">100</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">count</span><span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="n">count</span><span class="p">,</span> <span class="n">c</span><span class="p">.</span><span class="n">count</span><span class="p">)</span>
<span class="mi">100</span> <span class="mi">100</span> <span class="mi">10</span>
</code></pre></div></div>

<p>这个例子说明，在实例对象c中的count属性进行了赋值后，就会覆盖掉类对象C的count属性。</p>

<p>由此我们有以下结论：</p>

<ol>
  <li>一般不要再类里面定义出所有属性和方法，应该多利用继承和组合机制来进行扩展。</li>
  <li>使用骆驼命名法，<code class="language-plaintext highlighter-rouge">CamelCase</code>。</li>
</ol>

<h3 id="绑定">绑定</h3>

<p><strong>Python严格要求方法需要有实例才能被调用</strong>，这种限制就是绑定。</p>

<p>如下代码：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span><span class="k">class</span> <span class="nc">A</span><span class="p">:</span>
       <span class="k">def</span> <span class="nf">printA</span><span class="p">():</span>
           <span class="k">print</span><span class="p">(</span><span class="s">'A'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span><span class="n">A</span><span class="p">.</span><span class="n">printA</span><span class="p">()</span>  <span class="c1"># 这里相当于直接调用类对象的方法
</span><span class="n">A</span>
</code></pre></div></div>
<p>但是一旦将类对象实例化以后，根据类实例化后的实例对象无法调用里面的函数。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span><span class="n">B</span> <span class="o">=</span> <span class="n">A</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span><span class="n">B</span><span class="p">.</span><span class="n">printA</span><span class="p">()</span>
<span class="nb">TypeError</span><span class="p">:</span> <span class="n">printA</span><span class="p">()</span> <span class="n">takes</span> <span class="mi">0</span> <span class="n">positional</span> <span class="n">arguments</span> <span class="n">but</span> <span class="mi">1</span> <span class="n">was</span> <span class="n">given</span>
</code></pre></div></div>
<p>实际上当我们调用类的实例对象的方法时，<code class="language-plaintext highlighter-rouge">B.printA()</code>的完整代码为<code class="language-plaintext highlighter-rouge">B.printA(B)</code>，由于Pyhton的绑定机制，**这里自动把B对象作为第一个参数传入，所以会出现TypeError，print()不需要参数，但是实际上传入了一个参数B。</p>

<p>下面我们利用__dict__来查看对象所有用的属性，来更好地理解。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span><span class="k">class</span> <span class="nc">C</span><span class="p">:</span>
       <span class="k">def</span> <span class="nf">setXY</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
           <span class="bp">self</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>
           <span class="bp">self</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span>
       <span class="k">def</span> <span class="nf">printXY</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
           <span class="k">print</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">y</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span><span class="n">d</span> <span class="o">=</span> <span class="n">C</span><span class="p">()</span>
 <span class="c1">#使用__dict__查看对象所拥有的属性
</span><span class="o">&gt;&gt;&gt;</span><span class="n">d</span><span class="p">.</span><span class="n">__dict__</span>
<span class="p">{}</span>
<span class="o">&gt;&gt;&gt;</span><span class="n">C</span><span class="p">.</span><span class="n">__dict__</span>
<span class="n">mappingproxy</span><span class="p">({</span><span class="s">'__module__'</span><span class="p">:</span> <span class="s">'__main__'</span><span class="p">,</span> <span class="s">'setXY'</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">function</span> <span class="n">C</span><span class="p">.</span><span class="n">setXY</span> <span class="n">at</span> <span class="mh">0x00000166C7E2A378</span><span class="o">&gt;</span><span class="p">,</span> <span class="s">'printXY'</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">function</span> <span class="n">C</span><span class="p">.</span><span class="n">printXY</span> <span class="n">at</span> <span class="mh">0x00000166C7E2A400</span><span class="o">&gt;</span><span class="p">,</span> <span class="s">'__dict__'</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">attribute</span> <span class="s">'__dict__'</span> <span class="n">of</span> <span class="s">'C'</span> <span class="n">objects</span><span class="o">&gt;</span><span class="p">,</span> <span class="s">'__weakreg__'</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">attribue</span> <span class="s">'__weakref__'</span> <span class="n">of</span> <span class="s">'C'</span> <span class="n">objects</span><span class="o">&gt;</span><span class="p">,</span> <span class="s">'__doc__'</span><span class="p">:</span> <span class="bp">None</span><span class="p">})</span>

</code></pre></div></div>
<p>__dict__属性由一个字典组成，字典中仅有实例对象的属性，不显示属性和特殊属性(魔法方法)，键表示的是属性名，值代表属性相应的数据值。</p>

<p>当我们给d加入新属性，而且这两个属性仅属于实例对象自身。</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span><span class="n">d</span><span class="p">.</span><span class="n">setXY</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span><span class="n">d</span><span class="p">.</span><span class="n">__dict__</span>
<span class="p">{</span><span class="s">'x'</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="s">'y'</span><span class="p">:</span> <span class="mi">5</span><span class="p">}</span>
</code></pre></div></div>

<p>因为self参数，当实例对象d调用setXY方法时，传入参数d，使得self.x = 4, self.y = 5等同于d.x = 4, d.y = 5。</p>

<p>再次强调这个属性只属于实例对象本身，即使我们删除掉之前定义的C类，同样可以获得执行：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span><span class="k">del</span> <span class="n">C</span>
<span class="o">&gt;&gt;&gt;</span><span class="n">d</span><span class="p">.</span><span class="n">printXY</span><span class="p">()</span>
<span class="mi">4</span> <span class="mi">5</span>
</code></pre></div></div>
<p>注意，一般只要用实例属性，而不要用类属性，因为类属性通常只用来跟踪与类相关的值。</p>

<p><strong>类中的属性与方法是静态的，只有在程序退出后，才会被释放。</strong></p>

<h4 id="问题">问题</h4>

<blockquote>
  <p>类对象在什么时候产生。</p>
</blockquote>

<p>当你这个类定义完时，类定义就编程类对象，可以直接通过“类名.属性”或者“类名.方法名（）”引用或使用相关的属性或方法。</p>

<blockquote>
  <p>类中的<code class="language-plaintext highlighter-rouge">self.x = x</code>是实例属性</p>
</blockquote>

<blockquote>
  <p>定义一个栈类，用于模拟一种后进先出的（LIFO）特性的数据结构。至少需要有以下方法：</p>
</blockquote>

<table>
  <thead>
    <tr>
      <th>方法名</th>
      <th>含义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>isEmpty()</td>
      <td>判断当前栈是否为空（返回True或者False）</td>
    </tr>
    <tr>
      <td>push()</td>
      <td>往栈的顶部压如一个数据项</td>
    </tr>
    <tr>
      <td>pop()</td>
      <td>往栈顶弹出一个数据项(并在栈中删除</td>
    </tr>
    <tr>
      <td>top()</td>
      <td>显示当前栈顶的一个数据</td>
    </tr>
    <tr>
      <td>bottom()</td>
      <td>显示当前栈底的一个数据</td>
    </tr>
  </tbody>
</table>

<p>自己的代码：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Stack</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">LIST</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">isEmpty</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">LIST</span> <span class="o">==</span> <span class="p">[]:</span>
            <span class="k">return</span> <span class="s">'TRUE'</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="s">'FALSE'</span>
    <span class="k">def</span> <span class="nf">push</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">LIST</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">pop</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">LIST</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>
    <span class="k">def</span> <span class="nf">top</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">LIST</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="k">def</span> <span class="nf">bottom</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">LIST</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

<span class="n">data1</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">data2</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">data3</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">Stack</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">isEmpty</span><span class="p">())</span>
<span class="n">a</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">data1</span><span class="p">)</span>
<span class="n">a</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">data2</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">isEmpty</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">top</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">bottom</span><span class="p">())</span>
<span class="n">a</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">data3</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">top</span><span class="p">())</span>
<span class="n">a</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">top</span><span class="p">())</span>
</code></pre></div></div>
<p>答案代码：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Stack</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="p">[]):</span>    <span class="c1">#考虑到了栈的初始情况
</span>            <span class="bp">self</span><span class="p">.</span><span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">start</span><span class="p">:</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">isEmpty</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">stack</span>    <span class="c1">#简洁的判断栈是否为空的方法，优于两个if
</span>
    <span class="k">def</span> <span class="nf">push</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">obj</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">pop</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">'警告，栈为空!'</span><span class="p">)</span>    <span class="c1">#考虑到了栈空的情况
</span>        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">top</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">'警告，栈为空！'</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">bottom</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">'警告：栈为空！'</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">stack</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div></div>

:ET