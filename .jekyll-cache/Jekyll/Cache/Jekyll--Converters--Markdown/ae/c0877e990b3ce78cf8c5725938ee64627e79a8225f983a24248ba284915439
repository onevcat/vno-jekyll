I"mk<p>整理自小甲鱼<a href="https://fishc.com.cn/">鱼C论坛</a></p>

<h3 id="迭代器的详细解释">迭代器的详细解释</h3>

<p>迭代器的意思类似于循环，每一次重复的过程被称为<strong>一次迭代的过程</strong>，而每一次迭代得到的结果会被用来作为下一次迭代的初始值。提供迭代方法的容器被称为<strong>迭代器</strong>，通常接触的迭代器有序列(如列表、元组、字符)、字典等，它们都支持迭代的操作。</p>

<p>举个例子，通常使用for语句来进行迭代，</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="s">"FishC"</span>
        <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="n">F</span>
<span class="n">i</span>
<span class="n">s</span>
<span class="n">h</span>
<span class="n">C</span>
</code></pre></div></div>

<p>字符串就是一个容器，同时也是一个迭代器，for语句的作用就是<strong>触发这个迭代器的迭代功能</strong>，每次从容器里一次拿出一个数据，这就是<strong>迭代操作</strong>。</p>

<blockquote>
  <p>但需要注意的是，迭代器不是一个容器，因为我们经常了解的容器像列表、字典、元组都是可以存放数据的，而迭代器就是实现了<code class="language-plaintext highlighter-rouge">__next__()</code>方法的对象(用于遍历容器中的数据)。</p>
</blockquote>

<p>例2，字典和文件也是支持迭代操作的，</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">links</span> <span class="o">=</span> <span class="p">{</span><span class="s">'鱼C工作室'</span><span class="p">:</span><span class="s">'http://www.fishc.com'</span><span class="p">,</span> \
             <span class="s">'鱼C论坛'</span><span class="p">:</span><span class="s">'http://bbs.fishc.com'</span><span class="p">,</span> \
             <span class="s">'鱼C博客'</span><span class="p">:</span><span class="s">'http://blog.fishc.com'</span><span class="p">,</span> \<span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">each</span> <span class="ow">in</span> <span class="n">links</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'%s -&gt; %s'</span> <span class="o">%</span> <span class="p">(</span><span class="n">each</span><span class="p">,</span> <span class="n">links</span><span class="p">[</span><span class="n">each</span><span class="p">]))</span>

<span class="n">鱼C博客</span> <span class="o">-&gt;</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="p">.</span><span class="n">fishc</span><span class="p">.</span><span class="n">com</span>
<span class="n">鱼C论坛</span> <span class="o">-&gt;</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">bbs</span><span class="p">.</span><span class="n">fishc</span><span class="p">.</span><span class="n">com</span>
<span class="n">鱼C工作室</span> <span class="o">-&gt;</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">blog</span><span class="p">.</span><span class="n">fishc</span><span class="p">.</span><span class="n">com</span>
</code></pre></div></div>

<h3 id="迭代器的两个bif">迭代器的两个BIF</h3>

<p>关于迭代，Python提供了两个BIF: <code class="language-plaintext highlighter-rouge">iter()</code>和<code class="language-plaintext highlighter-rouge">next()</code>。</p>

<p>对于一个容器对象调用<code class="language-plaintext highlighter-rouge">iter()</code>就<strong>得到它的迭代器</strong>，调用<code class="language-plaintext highlighter-rouge">next()</code>迭代器就会<strong>返回下一个值</strong>。</p>

<blockquote>
  <p>迭代器的结束：如果迭代器没有值就可以返回了，并抛出StopInteration Error。</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">string</span> <span class="o">=</span> <span class="s">"FishC"</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">it</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>  <span class="c1"># iter() --&gt; 获得了字符串容器的迭代器
</span><span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
<span class="s">'F'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
<span class="s">'i'</span>
<span class="p">...</span>

<span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
<span class="s">'C'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
<span class="nb">StopIteration</span>
</code></pre></div></div>

<p>我们利用while以及迭代器的两个BIF来分析for语句的工作方式：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">string</span> <span class="o">=</span> <span class="s">"FishC"</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">it</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">each</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">StopIteration</span><span class="p">:</span>
            <span class="k">break</span>
        <span class="k">print</span><span class="p">(</span><span class="n">each</span><span class="p">)</span>

<span class="n">F</span>
<span class="n">i</span>
<span class="n">s</span>
<span class="n">h</span>
<span class="n">C</span>
</code></pre></div></div>

<h3 id="实现迭代器的两个魔法方法">实现迭代器的两个魔法方法</h3>

<p>实现迭代器的两个魔法方法有两个：<code class="language-plaintext highlighter-rouge">__iter__()</code>和<code class="language-plaintext highlighter-rouge">__next__()</code>。</p>

<table>
  <thead>
    <tr>
      <th>方法</th>
      <th>功能</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">__init__()</code></td>
      <td>一个容器如果是迭代器，给方法实现返回迭代器本身</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">__next__()</code></td>
      <td>决定迭代的规则</td>
    </tr>
  </tbody>
</table>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Fibs</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">a</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">b</span> <span class="o">=</span> <span class="mi">1</span>

        <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">self</span>

        <span class="k">def</span> <span class="nf">__next__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">a</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">b</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">b</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">a</span> <span class="o">+</span><span class="bp">self</span><span class="p">.</span><span class="n">b</span>
            <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">a</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">fibs</span> <span class="o">=</span> <span class="n">Fibs</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">each</span> <span class="ow">in</span> <span class="n">fibs</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">each</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="n">each</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">break</span>

<span class="mi">1</span>
<span class="mi">1</span>
<span class="mi">2</span>
<span class="mi">3</span>
<span class="mi">5</span>
<span class="mi">8</span>
<span class="mi">13</span>
</code></pre></div></div>
<p>这个迭代器的唯一亮点就是没有终点，所以如果没有跳出循环，会不断迭代。可以通过修改<code class="language-plaintext highlighter-rouge">__next__()</code>来控制迭代的范围。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Fibs</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">20</span><span class="p">):</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">a</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">b</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">n</span> <span class="o">=</span> <span class="n">n</span>

        <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">self</span>

        <span class="k">def</span> <span class="nf">__next__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">a</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">b</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">b</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">a</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">b</span>
            <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">a</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nb">StopIteration</span>
                <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">a</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">fibs</span> <span class="o">=</span> <span class="n">Fibs</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">each</span> <span class="ow">in</span> <span class="n">fibs</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">each</span><span class="p">)</span>

<span class="mi">1</span>
<span class="mi">1</span>
<span class="mi">2</span>
<span class="mi">3</span>
<span class="mi">5</span>
<span class="mi">8</span>
</code></pre></div></div>

<h3 id="问题">问题</h3>

<p>问题(1) 用while语句实现与以下for语句相同的功能：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">each</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">each</span><span class="p">)</span>
</code></pre></div></div>

<p>代码如下，</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>
<span class="nb">list</span> <span class="o">=</span> <span class="p">[]</span>
<span class="nb">list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
<span class="n">it</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
<span class="k">while</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">:</span>
    <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="nb">list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">each</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">StopIteration</span><span class="p">:</span>
        <span class="k">break</span>
    <span class="k">print</span><span class="p">(</span><span class="n">each</span><span class="p">)</span>
</code></pre></div></div>

<p>答案代码，</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">alist</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>   <span class="c1"># 直接用range()生成一个列表
</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">it</span><span class="p">))</span>
    <span class="k">except</span> <span class="nb">StopIteration</span><span class="p">:</span>
        <span class="k">break</span>
</code></pre></div></div>

<p>问题(2) 写一个迭代器，要求输出至今为止所有的闰年。如：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">leapYears</span> <span class="o">=</span> <span class="n">LeapYear</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">leapYears</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">2000</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">break</span>

<span class="mi">2012</span>
<span class="mi">2008</span>
<span class="mi">2004</span>
<span class="mi">2000</span>
</code></pre></div></div>

<p>提示：<br />
闰年判定法<br />
((year%4 == 0 and year%100! = 0)) or (year%400 == 0)</p>

<p>代码如下，</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">datetime</span>

<span class="k">class</span> <span class="nc">LeapYear</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">date</span><span class="p">.</span><span class="n">today</span><span class="p">().</span><span class="n">year</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">n</span> <span class="o">=</span> <span class="n">n</span>

    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span>

    <span class="k">def</span> <span class="nf">__next__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>  
    <span class="c1"># 注意的是__next__()方法总是描述下一次运行时即迭代中的单次行为。
</span>        <span class="k">while</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">n</span> <span class="o">%</span> <span class="mi">400</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">n</span><span class="o">%</span><span class="mi">4</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span><span class="o">%</span><span class="mi">100</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">):</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">n</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">n</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span>  <span class="c1"># return指令要在迭代描述的后面
</span>
<span class="n">leapYears</span> <span class="o">=</span> <span class="n">LeapYear</span><span class="p">()</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">leapYears</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">2000</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">break</span>
</code></pre></div></div>

<p>答案代码如下，</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">datetime</span> <span class="k">as</span> <span class="n">dt</span>

<span class="k">class</span> <span class="nc">LeapYear</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">now</span> <span class="o">=</span> <span class="n">dt</span><span class="p">.</span><span class="n">date</span><span class="p">.</span><span class="n">today</span><span class="p">().</span><span class="n">year</span>

    <span class="k">def</span> <span class="nf">isLeapYear</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">year</span><span class="p">)</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">year</span><span class="o">%</span><span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">year</span><span class="o">%</span><span class="mi">100</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">year</span><span class="o">%</span><span class="mi">400</span> <span class="o">==</span> <span class="mi">0</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>

    <span class="k">def</span> <span class="nf">__next__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">isLeapYear</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">now</span><span class="p">):</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">now</span> <span class="o">-=</span> <span class="mi">1</span>

        <span class="n">temp</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">now</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">now</span> <span class="o">-=</span> <span class="mi">1</span>

        <span class="k">return</span> <span class="n">temp</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">leapYears</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">2000</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">break</span>
</code></pre></div></div>

<p>问题(3) 要求自己写一个MyRev类，功能与reversed()相同(内置函数reversed(seq)是返回一个迭代器，是序列seq的逆序显示)。例如：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">myRev</span> <span class="o">=</span> <span class="n">MyRev</span><span class="p">(</span><span class="s">"FishC"</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">myRev</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>

<span class="n">ChsiF</span>
</code></pre></div></div>

<p>代码如下，</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyRev</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">seq</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">seq</span> <span class="o">=</span> <span class="n">seq</span>
        <span class="bp">self</span><span class="p">.</span><span class="nb">len</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">seq2list</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span>
        <span class="nb">list</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">seq</span><span class="p">:</span>
            <span class="nb">list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">list</span>

    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span>

    <span class="k">def</span> <span class="nf">__next__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">temp</span> <span class="o">=</span> <span class="n">MyRev</span><span class="p">.</span><span class="n">seq2list</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">seq</span><span class="p">)</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="nb">len</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nb">StopIteration</span>
        <span class="bp">self</span><span class="p">.</span><span class="nb">len</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="c1"># 这里可以直接return self.seq[self.len]，即字符串可以当做列表使用
</span>        <span class="k">return</span> <span class="n">temp</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="nb">len</span><span class="p">]</span>

<span class="n">myRev</span> <span class="o">=</span> <span class="n">MyRev</span><span class="p">(</span><span class="s">"FishC"</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">myRev</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>
</code></pre></div></div>

:ET