I"<h3 id="75-bxidata">7.5 [bx+idata]</h3>

<p>例如我们要访问地址[10H], 可以进行如下变换：</p>

\[[bx=10H]=[bx=8H+2H]\]

<p>[bx+idata]表示一个内存单元，它的偏移地址为(bx)+idata (bx中的数值加上idata)。</p>

<p>将这种操作代入指令中，如<code class="language-plaintext highlighter-rouge">mov ax, [bx+200]</code>，含义为：</p>

\[(ax)=((ds)*16+(bx)+200)\]

<p>[bx+idata]的形式有多种方法，如下等同：</p>

<ol>
  <li>mov ax, [200+bx]</li>
  <li>mov ax, 200[bx]</li>
  <li>mov ax, [bx].200</li>
</ol>

<h3 id="76-用bxidata的方式进行数组的处理">7.6 用[bx+idata]的方式进行数组的处理</h3>

<p>首先复习一下上一篇博客中大小写字母转化的代码（非常重要）：</p>

<pre><code class="language-x86asm">assume cs:codesg, ds:datasg
datasg segment
  db 'BaSiC'
  db 'MinIX'
datasg ends

codesg segment
  start:  mov ax, datasg
          mov ds, ax

          mov bx, 0
          mov cx, 5
      s:  mov al, ds:[bx]
          and al, 11011111b
          mov ds:[bx], al
          inc bx
          loop s
          
          mov bx, 5
          mov cx, 5
     s0:  mov al, ds:[bx]
          or al, 00100000b
          mov ds:[bx], al
          inc bx
          loop s0

          mov ax, 4c00h
          int 21h

codesg ends
end start
</code></pre>

<p>利用[bx+idata]的方法对代码进行优化：</p>

<pre><code class="language-x86asm">assume cs:codesg, ds:datasg
datasg segment
  db 'BaSiC'
  db 'MinIX'
datasg ends

codesg segment
  start:  mov ax, datasg
          mov ds, ax

          mov bx, 0
          mov cx, 5
      s:  mov al, ds:[bx]  ;定义第一个字符串中的字符
          and al, 11011111b
          mov ds:[bx], al  ;定义第二个字符串中的字符

          mov al, ds:[bx+5]
          or al, 00100000b
          mov ds:[bx+5], al

          inc bx
          loop s

codesg ends
end start
</code></pre>
<p>这里注意以下关系，并可以基于此对代码进行改写，代码完全等效：</p>

\[0[bx]=[bx]=[bx].0=[bx+0]=[0+bx]\]

<p>在C语言中也存在着相同的处理方式，如下代码：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">char</span> <span class="n">a</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="s">"BaSiC"</span><span class="p">;</span>
<span class="kt">char</span> <span class="n">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="s">"MinIX"</span><span class="p">;</span>

<span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
  <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
  <span class="k">do</span>
  <span class="p">{</span>
  <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&amp;</span><span class="mh">0xDF</span><span class="p">;</span>
  <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">|</span><span class="mh">0x20</span><span class="p">;</span>
  <span class="n">i</span><span class="o">++</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">while</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>其中，&amp;含义与and相同，|含义与or相同。</p>

<p>C语言：a[i], b[i]
汇编语言：0[bx], 5[bx]</p>

<p>通过比较，我们可以发现，<strong>[bx+idata]的方式为高级语言实现数组提供了便利机制</strong>。</p>

:ET