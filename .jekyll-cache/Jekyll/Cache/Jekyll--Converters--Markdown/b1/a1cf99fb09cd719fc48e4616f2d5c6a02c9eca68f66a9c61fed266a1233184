I"~<p><a href="https://blog.csdn.net/qq_41115702/article/details/82763383">转自CSDN博客，Dask Jhonson</a><br />
<a href="https://blog.csdn.net/iteye_10501/article/details/82297309">转自CSDN博客，iteye_10501</a></p>

<p>表格总结：</p>

<table>
  <thead>
    <tr>
      <th>寄存器的分类</th>
      <th> </th>
      <th>寄存器</th>
      <th>主要用途</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>通用寄存器</td>
      <td>数据寄存器</td>
      <td>AX</td>
      <td>乘、除运算，字的输入输出，中间结果的缓存</td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td>AL</td>
      <td>字节的乘、除运算，字节的输入输出，十进制算数运算</td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td>AH</td>
      <td>字节的乘、除运算，存放中断的功能号</td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td>BX</td>
      <td>存储器指针</td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td>CX</td>
      <td>串操作、循环控制的计数器</td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td>CL</td>
      <td>移位操作的计数器</td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td>DX</td>
      <td>字的乘、除运算，间接的输入输出</td>
    </tr>
    <tr>
      <td> </td>
      <td>变址寄存器</td>
      <td>SI</td>
      <td>存储器指针、串指令中的源操作数指针</td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td>DI</td>
      <td>存储器指针、串指令中的目的操作数指针</td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td>BP</td>
      <td>存储器指针、存取堆栈的指针</td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td>SP</td>
      <td>堆栈的栈顶指针</td>
    </tr>
    <tr>
      <td>指令指针</td>
      <td> </td>
      <td>IP/EIP</td>
      <td> </td>
    </tr>
    <tr>
      <td>标志位寄存器</td>
      <td> </td>
      <td>FLag/EFlag</td>
      <td> </td>
    </tr>
    <tr>
      <td>32位CPU的段寄存器</td>
      <td>16位CPU的段寄存器</td>
      <td>ES</td>
      <td>附加段寄存器</td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td>CS</td>
      <td>代码段寄存器</td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td>SS</td>
      <td>堆栈段寄存器</td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td>DS</td>
      <td>数据段寄存器</td>
    </tr>
    <tr>
      <td> </td>
      <td>新增加的段寄存器</td>
      <td>FS</td>
      <td>附加段寄存器</td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td>GS</td>
      <td>附加段寄存器</td>
    </tr>
  </tbody>
</table>

<p>8086CPU总共有14个寄存器：<br />
即AX，BX，CX，DX，SP，BP，SI，DI，IP，FLAG，CS，DS，SS，ES共14个。</p>

<h3 id="1-通用寄存器">1. 通用寄存器</h3>

<blockquote>
  <p>AX，BX，CX，DX称作为<strong>数据寄存器</strong>：</p>
</blockquote>

<p>AX (Accumulator)：累加寄存器，也称之为累加器；<br />
BX (Base)：基地址寄存器；<br />
CX (Count)：计数器寄存器；<br />
DX (Data)：数据寄存器；</p>

<blockquote>
  <p>SP和BP又称作为<strong>指针寄存器</strong>：</p>
</blockquote>

<p>SP (Stack Pointer)：堆栈指针寄存器；<br />
BP (Base Pointer)：基指针寄存器；<br /></p>

<blockquote>
  <p>SI和DI又称作为<strong>变址寄存器</strong>：</p>
</blockquote>

<p>SI (Source Index)：源变址寄存器；<br />
DI (Destination Index)：目的贬值寄存器；</p>

<h3 id="2-控制寄存器">2. 控制寄存器</h3>

<blockquote>
  <p>IP (Instruction Pointer)：指令指针寄存器；
FLAG：标志寄存器；</p>
</blockquote>

<h3 id="3-段寄存器">3. 段寄存器</h3>

<blockquote>
  <p>CS (Code Segment)：代码段寄存器；<br />
DS (Data Segment)：数据段寄存器；<br />
SS (Stack Segment)：堆栈段寄存器；<br />
ES (Extra Segment)：附加段寄存器；</p>
</blockquote>

<p>以上是常见的寄存器分类；其终值得注意的每个寄存器都是16位的(dword，双字节)，而只有4个数据寄存器，<strong>即AX，BX，CX，DX可以拆分为两个8位寄存器来使用</strong>。</p>

<h3 id="寄存器使用方法">寄存器使用方法</h3>

<h4 id="1-4个数据寄存器是可拆分的">1. 4个数据寄存器是可拆分的</h4>

<p>例如AX可分为AH(高位寄存器)和AL(低位寄存器)，即：在负值的时候可分开赋值。</p>

<h4 id="2-csip寄存器">2. CS/IP寄存器</h4>

<p>CS:IP 索引的内存即为CPU开始读取代码的起点，之后的一段代码区域，被称为代码片段(code segment)，这两个寄存器不能进行赋值操作(mov操作)，只能通过jmp指令跳转。</p>

<pre><code class="language-x86asm">jmp 4E6A:0
</code></pre>

<h4 id="3-sssp">3. SS/SP</h4>

<p>用于栈顶操作</p>

<h4 id="4-segment段">4. segment(段)</h4>

<ol>
  <li>数据段(被存在DS指定的段地址开始的地方)</li>
  <li>代码段(被存在CS指定的段地址开始的地方)</li>
  <li>栈段(被存在SS指定的段地址开始的地方)</li>
</ol>

<p>一般通过assume伪指令把数据段绑定在对应的段上，</p>

<pre><code class="language-x86asm">assume cs:code, ds:data, ss:stack
</code></pre>

<h4 id="5-寄存器寻址">5. 寄存器寻址</h4>

<p>(1) 在8086CPU中只有这四个寄存器可以在[…]中进行内存单元的寻址。</p>

<p>比如，下面的指令都是正确的：<br />
mov ax,[bx]<br />
mov ax,[bx+si]<br />
mov ax,[bx+di]<br />
mov ax,[bp]<br />
mov ax,[bp+si]<br />
mov ax,[bp+di]</p>

<p>而下面都是错误的:
mov ax,[cx]<br />
mov ax,[ax]<br />
mov ax,[dx]<br />
mov ax,[ds]</p>

<p>(2) 在[…]中，这四个寄存器可以单独出现，或者只能以四种组合出现：bx和si、bx和di、bp和si、bp和di。</p>

<p>比如下面都是正确的：<br />
mov ax,[bx]<br />
mov ax,[si]<br />
mov ax,[di]<br />
mov ax,[bp]<br />
mov ax,[bx+si]<br />
mov ax,[bx+di]<br />
mov ax,[bp+si]<br />
mpv ax,[bp+di]<br />
mov ax,[bx+si+idata]<br />
mov ax,[bx+si+idata]<br />
mov ax,[bp+si+idata]<br />
mov ax,[bp+di+idata]</p>

<p>下面就是错误的：<br />
mov ax,[bx+bp]<br />
mov ax,[si+di]</p>

<p>(3) 只要在[…]中使用寄存器bp，而指令汇总没有显示给出段地址，<strong>段地址就默认在ss中</strong>。 比如下面的指令：</p>

<p>mov ax,[bp] 含义：(ax)=((ss)*16+(bp))<br />
mov ax,[bp+idata] 含义：(ax)=((ss)*16+(bp)+idata)<br />
mov ax,[bp+si] 含义：(ax)=((ss)*16+(bp)+(si))<br />
mov ax,[bp+si+idata] 含义：(ax)=((ss)*16+(bp)+(si)+idata)</p>

:ET