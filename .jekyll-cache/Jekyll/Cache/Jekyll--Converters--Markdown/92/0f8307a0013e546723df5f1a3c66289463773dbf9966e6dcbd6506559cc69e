I"(.<p>整理自小甲鱼<a href="https://fishc.com.cn/">鱼C论坛</a></p>

<h3 id="打印">打印</h3>

<p>C语言的打印命令，<code class="language-plaintext highlighter-rouge">printf</code>，将制定的内容打印到屏幕上。</p>

<p>printf最后的f是formatted的缩写，格式，也因此通常把printf命令成为<strong>格式化输出函数</strong>。</p>

<p>代码示例：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="err">
</span><span class="s">        **             *</span><span class="err">
</span><span class="s">      *******         **</span><span class="err">
</span><span class="s">    ************     ***</span><span class="err">
</span><span class="s">  ***************** ****</span><span class="err">
</span><span class="s">****** @ ***************</span><span class="err">
</span><span class="s">  ***************** ****</span><span class="err">
</span><span class="s">    ************     ***</span><span class="err">
</span><span class="s">      *******         **</span><span class="err">
</span><span class="s">        **             *"</span><span class="p">);</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>注意这样打印会报错，应该做一下修改：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">\
        **             *</span><span class="se">\n</span><span class="s">\
      *******         **</span><span class="se">\n</span><span class="s">\
    ************     ***</span><span class="se">\n</span><span class="s">\
  ***************** ****</span><span class="se">\n</span><span class="s">\
****** @ ***************</span><span class="se">\n</span><span class="s">\
  ***************** ****</span><span class="se">\n</span><span class="s">\
    ************     ***</span><span class="se">\n</span><span class="s">\
      *******         **</span><span class="se">\n</span><span class="s">\
        **             *</span><span class="se">\n\"</span><span class="s">);</span><span class="err">

</span><span class="s">	return 0;</span><span class="err">
</span><span class="s">}</span><span class="err">
</span></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">\n</code>的含义是换行。</p>

<p>字符串可以由<strong>可见字符和转义字符</strong>组成。</p>

<p>常用转义字符如下，</p>

<table>
  <thead>
    <tr>
      <th>转义字符</th>
      <th>含义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>\a</td>
      <td>响铃(BEL)</td>
    </tr>
    <tr>
      <td>\b</td>
      <td>退格(BS)，将当前位置移到前一列</td>
    </tr>
    <tr>
      <td>\f</td>
      <td>换页(FF)，将当前位置移到下一页开头</td>
    </tr>
    <tr>
      <td>\n</td>
      <td>换行(LF)，将当前位置移到下一行开头</td>
    </tr>
    <tr>
      <td>\r</td>
      <td>回车(CR)，将当前位置移到本行开头</td>
    </tr>
    <tr>
      <td>\t</td>
      <td>水平制表(HT)，跳到下一个TAB位置</td>
    </tr>
    <tr>
      <td>\v</td>
      <td>垂直制表(VT)</td>
    </tr>
    <tr>
      <td>\</td>
      <td>表示反斜杠本身()</td>
    </tr>
    <tr>
      <td>'</td>
      <td>表示单引号(‘)</td>
    </tr>
    <tr>
      <td>"</td>
      <td>表示双引号(“)</td>
    </tr>
    <tr>
      <td>\?</td>
      <td>表示问号(?)</td>
    </tr>
    <tr>
      <td>\0</td>
      <td>表示空字符(NULL)</td>
    </tr>
    <tr>
      <td>\ddd</td>
      <td>1~3位八进制数所代表的任意字符</td>
    </tr>
    <tr>
      <td>\xhh</td>
      <td>1~2位十六进制数所代表的任意字符</td>
    </tr>
  </tbody>
</table>

<p>注意换页转义字符( \ )后面的反斜杠，其作用是分行符。</p>

<p>因此代码可以改写如下：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">print</span>\
<span class="n">f</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">\
        **             *</span><span class="se">\n</span><span class="s">\
      *******         **</span><span class="se">\n</span><span class="s">\
    ************     ***</span><span class="se">\n</span><span class="s">\
  ***************** ****</span><span class="se">\n</span><span class="s">\
****** @ ***************</span><span class="se">\n</span><span class="s">\
  ***************** ****</span><span class="se">\n</span><span class="s">\
    ************     ***</span><span class="se">\n</span><span class="s">\
      *******         **</span><span class="se">\n</span><span class="s">\
        **             *</span><span class="se">\n\"</span><span class="s">);</span><span class="err">

</span><span class="s">	return 0;</span><span class="err">
</span><span class="s">}</span><span class="err">

</span></code></pre></div></div>

<p><strong>但注意，换行符反斜杠后不能加空格，必须定格！</strong></p>

<h3 id="printf函数详解">printf函数详解</h3>

<h4 id="函数概要">函数概要：</h4>

<p>pintf函数用于打印格式化字符串到标准输出流。</p>

<h4 id="函数原型">函数原型：</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
</span><span class="p">...</span>
<span class="kt">int</span> <span class="nf">printf</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">format</span><span class="p">,</span> <span class="p">...);</span>
</code></pre></div></div>

<h4 id="参数分析">参数分析：</h4>

<p>(1) format参数</p>

<p>其参数为格式化字符串，由格式化占位符和普通字符组成。
<strong>格式化占位符以%开头</strong>,  用于指明输出参数值如何格式化。</p>

<p>格式化语法：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%[flag][width][.precision][length]specifier
</code></pre></div></div>
<blockquote>
  <p>每一个格式化占位符均以%开始，以转换字符结束。</p>
</blockquote>

<p>specifer( 转换字符，必选 )的内容:</p>

<table>
  <thead>
    <tr>
      <th>转换字符</th>
      <th>参数类型；转换结果</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>c</td>
      <td>char；字符</td>
    </tr>
    <tr>
      <td>d</td>
      <td>int；有符号十进制整数</td>
    </tr>
    <tr>
      <td>i</td>
      <td>同上</td>
    </tr>
    <tr>
      <td>e</td>
      <td>double；以指数形式输出单、双精度浮点数（小写 e）</td>
    </tr>
    <tr>
      <td>E</td>
      <td>同上（大写 E）</td>
    </tr>
    <tr>
      <td>f</td>
      <td>double；以小数形式输出单、双精度浮点数</td>
    </tr>
    <tr>
      <td>g</td>
      <td>double；以 %f 或 %e 中较短的输出宽度输出单、双精度浮点数（指数显示小写 e）</td>
    </tr>
    <tr>
      <td>G</td>
      <td>同上（指数显示大写 E）</td>
    </tr>
    <tr>
      <td>o</td>
      <td>unsigned int；无符号八进制（无前导 0）</td>
    </tr>
    <tr>
      <td>s</td>
      <td>char *；字符串</td>
    </tr>
    <tr>
      <td>u</td>
      <td>int；无符号十进制</td>
    </tr>
    <tr>
      <td>x</td>
      <td>unsigned int；无符号十六进制（无前导 0x）</td>
    </tr>
    <tr>
      <td>X</td>
      <td>同上（无前导 0X）</td>
    </tr>
    <tr>
      <td>p</td>
      <td>void *；指针值</td>
    </tr>
    <tr>
      <td>n</td>
      <td>int *；存放已写字符的个数</td>
    </tr>
  </tbody>
</table>

<p>flags(标志，可选):</p>

<table>
  <thead>
    <tr>
      <th>标志</th>
      <th>含义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>-</td>
      <td>指定被转换的参数在其字段内左对齐（默认是右对齐）</td>
    </tr>
    <tr>
      <td>+</td>
      <td>指定在输出的数前面加上正负号</td>
    </tr>
    <tr>
      <td>空格</td>
      <td>如果第一个字符不是正负号，则在其前面加上一个空格</td>
    </tr>
    <tr>
      <td>0</td>
      <td>对于数值转换，当输出长度小于字段宽度时，添加前导 0 进行填充</td>
    </tr>
    <tr>
      <td>#</td>
      <td>指定另一种输出形式：</td>
    </tr>
    <tr>
      <td> </td>
      <td>1. 如果转换字符为 o，则第一个数字为 0</td>
    </tr>
    <tr>
      <td> </td>
      <td>2. 如果转换字符为 x 或 X，则指定在输出的非 0 值前加 0x 或 0X</td>
    </tr>
    <tr>
      <td> </td>
      <td>3. 对于转换字符为 e、E、f、g 或 G 的情况，</td>
    </tr>
    <tr>
      <td> </td>
      <td>指定输出总是包含一个小数点。另外，对于转换字符为 g 或 G，</td>
    </tr>
    <tr>
      <td> </td>
      <td>还指定输出值尾部无意义的 0 将被保留</td>
    </tr>
  </tbody>
</table>

<p>flags可以同时存在多个，无字数要求。</p>

<blockquote>
  <p>width（宽度，可选）是一个数值，用于指定最小字段的宽度</p>
</blockquote>

<p>转换后的参数输出宽度至少要达到这个数值。如果参数的字符数小于该数值，则在参数左边（如果 flags 设置为 -，要求左对齐的话则在右边）填充一些字符。填充字符通常为空格，但是如果 flags 设置为 0，则填充字符为数字 0。</p>

<blockquote>
  <p>.precision（.精度，可选），通过点号（.）分隔字段的宽度和精度</p>
</blockquote>

<ol>
  <li>对于字符串，它指定打印的字符的最大个数</li>
  <li>对于整数，它指定打印的数字位数（必要时可加填充位 0 以达到宽度要求）</li>
  <li>对于转换字符为 e、E 或 f，它指定打印的小数点后的数字位数</li>
  <li>对于转换字符为 g 或 G，它指定打印的有效数字位数</li>
</ol>

<blockquote>
  <p>length（长度修饰符，可选）的值可以是 h、hh、l、ll 或 L</p>
</blockquote>

<ol>
  <li>hh 表示将相应的参数按 signed char 或 unsigned char 类型输出</li>
  <li>h 表示将相应的参数按 short 或 unsigned short 类型输出</li>
  <li>l 表示将相应的参数按 long 或 unsigned long 类型输出</li>
  <li>ll 表示将相应的参数按 long long 或 unsigned long long 类型输出</li>
  <li>L 表示将相应的参数按 long double 类型输出</li>
</ol>

<blockquote>
  <p>… 附加参数</p>
</blockquote>

<p>该参数的个数由格式化字符串决定。</p>

<p>每个参数的值应当与前面格式化字符串中的占位符类型和位置一一对应。</p>

<blockquote>
  <p>返回值：</p>
</blockquote>

<p>如果函数调用成功，返回值是实际打印的字符数（不包含表示字符串结束的 ‘\0’）；</p>

<p>如果函数调用失败，返回值是一个负数。</p>

:ET