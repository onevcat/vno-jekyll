I"<h3 id="94-转移的目的地址在指令中的jmp指令">9.4 转移的目的地址在指令中的jmp指令</h3>

<p>之前的jmp指令语法都是相当于当前IP的转移位移。</p>

<p><code class="language-plaintext highlighter-rouge">jmp far ptr 标号</code> 该命令实现的是段间转移，这种转移也被成为远转移。功能如下：</p>

<p>(CS)=标号所在段的段地址；(IP)=标号在段中的偏移地址。</p>

<p>如下指令，</p>

<pre><code class="language-x86asm">assume cs:codesg
  codesg segment
    start:mov ax, 0
          mov bx, 0
          jmp far ptr s
          db 256 dup (0)
        s:add ax, 1
          inc ax
  codesg ends
end start
</code></pre>
<p>对其进行编译并使用debug跟踪，查看其机器代码如下，</p>

<p><img src="/assets/201911/2019-12-01_15-22-54.png" alt="figure1" /></p>

<p>观察076A:0006，jmp 相关指令为<code class="language-plaintext highlighter-rouge">EA0B016A07</code>，指令<code class="language-plaintext highlighter-rouge">EA</code>为jmp的机器指令，后面的<code class="language-plaintext highlighter-rouge">0B016A07</code>为相应的跳转地址，由于机器码与汇编程序地址相反，高位在前，低位在后，所以对应着<code class="language-plaintext highlighter-rouge">jmp cs(076A):ip(010B)</code>。</p>

<h3 id="95-转移地址在寄存器中的jmp指令">9.5 转移地址在寄存器中的jmp指令</h3>

<p>所谓转移地址在寄存器中，即通过<code class="language-plaintext highlighter-rouge">jmp</code>到寄存器中来实现段内近转移，这时寄存器中存放IP的值。</p>

<p><code class="language-plaintext highlighter-rouge">jmp 16位reg</code>，实现功能为：(IP)=(16位reg)</p>

<p>如下，</p>

<pre><code class="language-x86asm">jmp ax
</code></pre>
<p>ax中为IP的值，<strong>实现的是段内近转移</strong>。</p>

<h3 id="96-转移地址在内存中的jmp指令">9.6 转移地址在内存中的jmp指令</h3>

<p>转移地址在内存中的jmp指令有两种格式：</p>

<p>(1) jmp word ptr 内存单元地址(<strong>段内转移</strong>):</p>

<p>功能：从内存单元地址处开始<strong>存放一个字单元，是转移的目的的偏移地址</strong>。</p>

<p>内存单元地址可用<a href="http://life.zququ.fun/2019/11/assembly-language-28/">寻址方式的任一格式</a>给出。</p>

<p>代码如下，</p>

<pre><code class="language-x86asm">mov ax, 0123H
mov ds:[0], ax
jmp word ptr ds:[0]
</code></pre>
<p>执行后，(IP)=0123H。或者如下，</p>

<pre><code class="language-x86asm">mov ax, 0123H
mov [bx], ax
jmp word ptr [bx]
</code></pre>
<p>执行后，(IP)=0123H。</p>

<p>(2) jmp dword ptr 内存单元地址(<strong>段间转移</strong>):</p>

<p>功能：从内存单元地址处开始存放<strong>两个字单元，高地址处的字是转移的目的段地址，低地址处是转移的目的偏移地址</strong>。</p>

<p>(CS)=(内存单元地址+2)
(IP)=(内存单元地址)</p>

<p>内存单元地址可用寻址方式的任一格式给出。</p>

<p>例如代码，</p>

<pre><code class="language-x86asm">mov ax, 0123H
mov ds:[0], ax
mov word ptr ds:[2], 0
jmp dword ptr ds:[0]
</code></pre>
<p>执行后，(CS)=0, (IP)=0123H, CS:IP指向0000:0123H。高位为0000–&gt;CS，低位为0123H–&gt;IP。</p>

<p>又如下面代码，</p>

<pre><code class="language-x86asm">mov ax, 0123H
mov [bx], ax
mov word ptr [bx+2], 0
jmp dword ptr [bx]
</code></pre>
<p>执行后，(CS)=0，(IP)=123H，CS:IP指向0000:0123H。</p>

<p>练习：</p>

<blockquote>
  <p>(1) 程序如下：</p>
</blockquote>

<pre><code class="language-x86asm">assume cs:code
data segment
?
data ends

code segment
  start:mov ax, data
        mov ds, ax
        mov bx, 0
        jmp word ptr [bx+1]
code ends
end start
</code></pre>
<p>问题：若要使程序中的jmp指令执行后，CS:IP指向程序的第一条指令，在data段中应该定义哪些数据？</p>

<p>分析可知在执行<code class="language-plaintext highlighter-rouge">jmp word ptr [bx+1]</code>，由于<code class="language-plaintext highlighter-rouge">[bx+1]</code>被指定为<code class="language-plaintext highlighter-rouge">word</code>格式，说明是在内存单元地址的<strong>段内转移</strong>。</p>

<p>另一方面由于[bx]中为0，所以等同于<code class="language-plaintext highlighter-rouge">jmp word ptr [1]</code>跳转到0000地址。所以data中为<code class="language-plaintext highlighter-rouge">dd 0</code>或<code class="language-plaintext highlighter-rouge">db 4 dup 0</code>或<code class="language-plaintext highlighter-rouge">dw 2 dup 0</code>。</p>

<blockquote>
  <p>(2) 程序如下：</p>
</blockquote>

<pre><code class="language-x86asm">assume cs:code
data segment
  dd 12345678H
data ends

code segment
  start:mov ax, data
        mov ds, ax
        mov bx, 0
        mov [bx], ______
        mov [bx+2], ______
        jmp dword ptr ds:[0]
code ends
end start
</code></pre>
<p>补全程序，使jmp指令执行后，CS:IP指向程序的第一条指令。</p>

<p>从<code class="language-plaintext highlighter-rouge">jmp dword ptr ds:[0]</code>，可以看出是<code class="language-plaintext highlighter-rouge">dword</code>格式，判断为转移地址在内存中的<strong>段间转移</strong>。由于CS:IP指向程序的第一条指令，所以CS:IP应该为CS:0000，故第一个位置应该为<code class="language-plaintext highlighter-rouge">mov [bx], bx</code>或<code class="language-plaintext highlighter-rouge">mov [bx], word ptr 0</code>或<code class="language-plaintext highlighter-rouge">mov [bx], offset start</code>等等，总之表示IP地址为0000。而第二个位置应该为<code class="language-plaintext highlighter-rouge">mov [bx+2], CS</code>或者<code class="language-plaintext highlighter-rouge">mov [bx+2], seg code</code>等等，总之表示其<strong>CS的段地址</strong>。</p>

<blockquote>
  <p>(3) 用Debug查看内存，结果如下：</p>
</blockquote>

<p>2000:1000 BE 00 06 00 00 00 …</p>

<p>则此时，CPU执行指令：</p>

<pre><code class="language-x86asm">mov ax, 2000H
mov es, ax
jmp dword ptr es:[1000H]
</code></pre>

<p>这时的(CS)和(IP)为多少？</p>

<p>对于双字类型的jmp指令，判断为段间跳转，即跳转到es:[1000H]，也就是2000H:1000H地址。这时的CS为高位0006，IP为低位00BE。这里需要注意的是，无论地址为多少，<strong>jmp都把相应地址所指的高位作为CS地址，而低位作为IP地址</strong>。</p>

<p>另外记住，在数据段中，<strong>后面的数据为高位, 前面的数据为低位</strong>!</p>

:ET