I"%#<h3 id="104-转移的目的地址在指令中的call指令">10.4 转移的目的地址在指令中的call指令</h3>

<p>前面讲的call指令，其对应的及其指令中并没有转移的目的地址，而是相对于当前IP的转移位移。</p>

<p>“call far ptr 标号”实现的是段间转移。</p>

<p>CPU执行此种格式的call指令时，进行如下的操作。</p>

<ol>
  <li>
    <p>(sp)=(sp)-2 <br />
((ss)*16+(sp))=(CS)<br />
(sp)=(sp)-2<br />
((ss)*16+(sp))=(IP)</p>
  </li>
  <li>
    <p>(CS)=标号所在段的段地址<br />
(IP)=标号在段中的偏移地址</p>
  </li>
</ol>

<p>从上面的描述中可以看出，如果我们用汇编语法来解释此种格式的call指令，则:</p>

<p>CPU执行”call far ptr 标号”时，相当于进行：</p>

<p>push CS<br />
push IP<br />
jmp far ptr 标号</p>

<p>问题：</p>

<p>下面的程序执行后，ax中的数值为多少？</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>内存地址</th>
      <th>机器码</th>
      <th>汇编指令</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>1000:0</td>
      <td>b80000</td>
      <td>mov ax, 0</td>
    </tr>
    <tr>
      <td>2</td>
      <td>1000:3</td>
      <td>9A09000010</td>
      <td>call far ptr s</td>
    </tr>
    <tr>
      <td>3</td>
      <td>1000:8</td>
      <td>40</td>
      <td>inc ax</td>
    </tr>
    <tr>
      <td>4</td>
      <td>1000:9</td>
      <td>58</td>
      <td>s:pop ax</td>
    </tr>
    <tr>
      <td>5</td>
      <td> </td>
      <td> </td>
      <td>add ax, ax</td>
    </tr>
    <tr>
      <td>6</td>
      <td> </td>
      <td> </td>
      <td>pop bx</td>
    </tr>
    <tr>
      <td>7</td>
      <td> </td>
      <td> </td>
      <td>add ax, bx</td>
    </tr>
  </tbody>
</table>

<p>在1处，ax –&gt; 0，在2处，执行call指令，IP = 8，并跳转到5处，<code class="language-plaintext highlighter-rouge">pop ax</code>，弹出IP地址并赋值给ax，此时ax –&gt; 8。执行<code class="language-plaintext highlighter-rouge">add ax, ax</code>，ax –&gt; 8 + 8 = 16 (<strong>注意这里是错误的，因为IP地址间的运算应该为16进制运算：8h + 8h = 10h</strong>)。由于call指令为<code class="language-plaintext highlighter-rouge">call far ptr 标号</code>实现的是段间转移，所以首先push的地址为CS，而后push进栈的地址为IP，所以第一次pop出的为IP，而后pop出的为CS。所以<code class="language-plaintext highlighter-rouge">pop bx</code>会弹出CS地址并赋值给bx，所以这是，bx的值为1000，所以<code class="language-plaintext highlighter-rouge">add ax, bx</code> –&gt; ax = ax + bx = 10h + 1000h = 1010h。</p>

<h3 id="105-转移地址在寄存器中的call指令">10.5 转移地址在寄存器中的call指令</h3>

<p>指令格式：call 16位reg<br />
功能：</p>

<p>(sp)=(sp)-2<br />
((ss)*16)+(sp)=(IP)<br />
(IP)=(16位reg)</p>

<p>用汇编语法来解释此种格式的call指令，CPU执行”call 16位reg”时，相当于进行：</p>

<p>push IP<br />
jmp 16位reg</p>

<p>问题：</p>

<p>下面的程序执行后，ax中的数值为多少？</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>内存地址</th>
      <th>机器码</th>
      <th>汇编指令</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>1000:0</td>
      <td>b80600</td>
      <td>mov ax, 6</td>
    </tr>
    <tr>
      <td>2</td>
      <td>1000:3</td>
      <td>ffd0</td>
      <td>call ax</td>
    </tr>
    <tr>
      <td>3</td>
      <td>1000:5</td>
      <td>40</td>
      <td>inc ax</td>
    </tr>
    <tr>
      <td>4</td>
      <td>1000:6</td>
      <td> </td>
      <td>mov bp, sp</td>
    </tr>
    <tr>
      <td>5</td>
      <td> </td>
      <td> </td>
      <td>add ax, [bp]</td>
    </tr>
  </tbody>
</table>

<p>在1处，ax –&gt; 6，在2处执行<code class="language-plaintext highlighter-rouge">call ax</code>指令，将IP = 5推入栈中，并跳转到ax对应的值为IP的地址，即1000:6，执行<code class="language-plaintext highlighter-rouge">mov bp, sp</code>，此时的(sp) = (sp) - 2 = 0000h(栈顶) - 2 = fffeh并赋值给bp。并且此时[bp] = ss:[bp] = 5。所以执行<code class="language-plaintext highlighter-rouge">add ax, [bp]</code>后，ax = ax + [bp] = 6h + 5h = 0bh。</p>

<h3 id="106-转移地址在内存中的call指令">10.6 转移地址在内存中的call指令</h3>

<p>转移地址在内存中的call指令有两种格式。</p>

<ol>
  <li>
    <p>call word ptr 内存单元地址<br />
用汇编语法来解释此种格式的call指令，则：<br />
CPU执行”call word ptr 内存单元地址”时，相当于进行：<br />
push IP<br />
jmp word ptr 内存单元地址<br />
<br />
代码示例，<br />
<br />
mov sp, 10h<br />
mov ax, 0123h<br />
mov ds:[0], ax<br />
call sord ptr ds:[0]<br />
<br />
执行后，(IP) = 0123H，(sp)=0EH。</p>
  </li>
  <li>
    <p>call dword ptr 内存单元地址<br />
用汇编语法来解释此种格式的call指令，则：<br />
CPU执行”call dword ptr 内存单元地址”时，相当于进行：<br />
<br />
push CS<br />
push IP<br />
jmp dword ptr 内存那单元地址<br /></p>

    <p>代码示例，<br /></p>

    <p>mov sp, 10h<br />
mov ax, 0123h<br />
mov ds:[0], ax<br />
mov word ptr ds:[2], 0<br />
call dword ptr ds:[0]<br /></p>

    <p>执行后，(CS)=0，(IP)=123H，(sp)=0CH。</p>
  </li>
</ol>

<p>问题(1)：</p>

<p>下面的程序执行后，ax中的数值为多少？</p>

<pre><code class="language-x86asm">assume cs:code
stack segment
  dw 8 dup (0)
stack ends
code segment
  start:mov ax, stack
        mov sp, ax
        mov sp, 16
        mov ds, ax
        mov ax, 0
        call word ptr ds:[0EH]
        inc ax
        inc ax
        inc ax
        mov ax, 4c00h
        int 21h
code ends
end start
</code></pre>
<p>首先我们绘制一个对应地址的表格，</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>内存地址</th>
      <th>代码</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>0C50:0000</td>
      <td>mov ax, stack</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0C50:0003</td>
      <td>mov ss, ax</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0C50:0005</td>
      <td>mov sp, 16</td>
    </tr>
    <tr>
      <td>4</td>
      <td>0C50:0008</td>
      <td>mov ds, ax</td>
    </tr>
    <tr>
      <td>5</td>
      <td>0C50:000A</td>
      <td>mov ax, 0</td>
    </tr>
    <tr>
      <td>6</td>
      <td>0C50:000D</td>
      <td>call word ptr ds:[0EH]</td>
    </tr>
    <tr>
      <td>7</td>
      <td>0C50:0011</td>
      <td>inc ax</td>
    </tr>
    <tr>
      <td>8</td>
      <td> </td>
      <td>inc ax</td>
    </tr>
    <tr>
      <td>9</td>
      <td> </td>
      <td>inc ax</td>
    </tr>
    <tr>
      <td>10</td>
      <td> </td>
      <td>mov ax, 4c00h</td>
    </tr>
    <tr>
      <td>11</td>
      <td> </td>
      <td>int 21h</td>
    </tr>
  </tbody>
</table>

<p>在5处，ax –&gt; 0。在6处，执行<code class="language-plaintext highlighter-rouge">call word ptr ds:[0EH]</code>，前面在3处，指明了栈顶为sp = 16，所以在栈顶的位置推入IP地址：IP = 0011，并执行跳转到目标地址ds:[0EH]，正好指向刚刚推入栈的IP = 0011，所以ds:[0EH] = 0011，所以跳转到7处，执行三次inc ax，所以ax = 0 + 1 + 1 + 1 = 3。</p>

<p>问题(2)</p>

<p>下面的程序执行后，ax和bx中的数值为多少？</p>

<pre><code class="language-x86asm">assume cs:code
data segment
  dw 8 dup(0)
data ends
code segment
  start:mov ax, data
        mov ss, ax
        mov sp, 16
        mov word ptr ss:[0], 0ffset s
        mov ss:[2], cs
        call dword ptr ss:[0]
        nop
      s:mov ax, 0ffset s
        sub ax, ss:[0ch]
        mov bx, cs
        sub bx, ss:[0eh]
        mov ax, 4c00h
        int 21h
code ends
end start
</code></pre>
<p>根据代码绘制栈，</p>

<table>
  <tbody>
    <tr>
      <td>s的CS</td>
    </tr>
    <tr>
      <td>s的IP-1</td>
    </tr>
    <tr>
      <td>…</td>
    </tr>
    <tr>
      <td>…</td>
    </tr>
    <tr>
      <td>…</td>
    </tr>
    <tr>
      <td>s的CS</td>
    </tr>
    <tr>
      <td>s的IP</td>
    </tr>
  </tbody>
</table>

<p>ss:[0]为s的IP，ss:[2]为s的CS。执行<code class="language-plaintext highlighter-rouge">call dword ptr ss:[0]</code>后，在ss:[0ch]，ss:[0dh]处推入IP = s的IP - 1，并在ss:[0eh]，ss:[0fh]推入CS = s的CS。在s中，<code class="language-plaintext highlighter-rouge">mov ax, offset s</code>ax = s 的IP。执行<code class="language-plaintext highlighter-rouge">sub ax, ss:[0ch]</code>，所以ax = ax - ss:[0ch] = s的IP - (s的IP - 1) = 1。<code class="language-plaintext highlighter-rouge">mov bx, cs</code>，所以bx = s的CS。则<code class="language-plaintext highlighter-rouge">sub bx, ss:[0eh]</code>结果，bx = s的CS - s的CS = 0。</p>

:ET