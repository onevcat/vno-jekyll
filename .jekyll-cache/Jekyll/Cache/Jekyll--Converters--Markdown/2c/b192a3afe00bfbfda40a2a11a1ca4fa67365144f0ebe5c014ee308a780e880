I""<p>整理自小甲鱼<a href="https://fishc.com.cn/">鱼C论坛</a></p>
<h3 id="对象--属性--方法">对象 = 属性 + 方法</h3>

<p>代码示例：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Turtle</span><span class="p">:</span>
    
    <span class="c1"># Python 中的类名(class)约定以大写字母开头
</span>    <span class="c1"># 特征的描述成为属性(attribute)，在代码层面来看就是变量
</span>
    <span class="n">color</span> <span class="o">=</span> <span class="s">'green'</span>
    <span class="n">weight</span> <span class="o">=</span> <span class="mi">10</span>
    <span class="n">legs</span> <span class="o">=</span> <span class="mi">4</span>
    <span class="n">shell</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="c1"># 方法(method)就是函数，通过调用这些函数来完成工作
</span>
    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"我正在很努力的往前爬。。。"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">bite</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"咬死你咬死你！"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="实例instance与实例对象instance-object">实例(instance)与实例对象(instance object)</h3>

<p>上面代码定义了对象的属性(特征)以及方法(行动)，但还不是一个完整的对象，将<strong>定义的这些称为类(class)</strong>。</p>

<p>需要使用类来创建一个真正的对象，这个<strong>对象就称为这个类的一个实例(instance)</strong>, 也称为<strong>实例对象(instance object)</strong>。</p>

<p>如以下代码：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tt</span> <span class="o">=</span> <span class="n">Turtle</span><span class="p">()</span>  <span class="c1"># 这里注意类要以大写字母开头
</span></code></pre></div></div>

<blockquote>
  <p>类名约定以答谢字母开头，函数用小写字母开头。<br />
赋值本身不是必需的，但如果没有把创建好的实例对象赋值给一个变量，那这个实例对象就没办法使用，因为<strong>没有任何引用指向这个实例</strong>，最终会被垃圾收集机制回收。</p>
</blockquote>

<p>代码如下：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tt</span><span class="p">.</span><span class="n">climb</span><span class="p">()</span>
<span class="n">我正在很努力的向前爬</span><span class="err">。。。</span>
</code></pre></div></div>

<h3 id="python面向对象编程的三个要素">python面向对象编程的三个要素</h3>

<h4 id="第一个要素封装">第一个要素，封装</h4>

<p>对象封装了属性，也就是封装了变量。也封装了方法，也就是函数。并成为了一个独立性的模块。</p>

<h4 id="第二个要素多态">第二个要素，多态</h4>

<p>不同对象对于不同的方法响应不同的行动。</p>

<p>如下代码：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">A</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">fun</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"I'm A"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">B</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">fun</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'I'</span><span class="n">m</span> <span class="n">B</span><span class="p">)</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">A</span><span class="p">()</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">B</span><span class="p">()</span>
</code></pre></div></div>
<p>虽然行动名称相同(<code class="language-plaintext highlighter-rouge">fun(self)</code>)，但由于对象的不同，会触发不同的行动。</p>

<h4 id="第三个要素-继承">第三个要素， 继承</h4>

<p>子类自动共享父类之间数据和方法的机制。</p>

<p>如下代码：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Mylist</span><span class="p">(</span><span class="nb">list</span><span class="p">):</span>   <span class="c1"># 这里Mylist 继承了list的方法
</span>    <span class="k">pass</span>

<span class="n">list2</span> <span class="o">=</span> <span class="n">Mylist</span><span class="p">()</span>
<span class="n">list2</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>
<h3 id="课后练习">课后练习</h3>

<blockquote>
  <p>1.函数和方法有什么区别？<br />
函数和方法几乎完全一样，但方法默认有一个self参数。</p>
</blockquote>

<blockquote>
  <p>2.按要求定义矩形类并生成实例对象<br />
属性：长，宽<br />
方法：设置长和宽 setRect(self)，获得长和宽 getRect(self)，获得面积 getArea(self)</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Rect</span><span class="p">:</span>
    <span class="n">length</span> <span class="o">=</span> <span class="mi">5</span>
    <span class="n">width</span> <span class="o">=</span> <span class="mi">4</span>

    <span class="k">def</span> <span class="nf">setRect</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'Please input the Width &amp; Length!'</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">length</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">'Width of the Rect is: '</span><span class="p">))</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">'Length of the Rect is: '</span><span class="p">))</span>
    
    <span class="k">def</span> <span class="nf">getRect</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'Length is %.2f'</span> <span class="o">%</span> <span class="bp">self</span><span class="p">.</span><span class="n">length</span><span class="p">,</span> \<span class="n">n</span>
              <span class="s">'Width is %.2f'</span> <span class="o">%</span> <span class="bp">self</span><span class="p">.</span><span class="n">width</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">getArea</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">Area</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">length</span> <span class="o">*</span> <span class="bp">self</span><span class="p">.</span><span class="n">width</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'The area of the Rect is %.2f'</span> <span class="o">%</span> <span class="n">Area</span><span class="p">)</span>

<span class="n">rectA</span> <span class="o">=</span> <span class="n">Rect</span><span class="p">()</span>
<span class="n">rectA</span><span class="p">.</span><span class="n">setRect</span><span class="p">()</span>
<span class="n">rectA</span><span class="p">.</span><span class="n">getRect</span><span class="p">()</span>
<span class="n">rectA</span><span class="p">.</span><span class="n">getArea</span><span class="p">()</span>
</code></pre></div></div>

:ET