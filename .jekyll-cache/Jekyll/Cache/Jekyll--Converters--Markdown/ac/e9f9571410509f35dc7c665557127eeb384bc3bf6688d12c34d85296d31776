I"]x<p>整理自小甲鱼<a href="https://fishc.com.cn/">鱼C论坛</a></p>

<h4 id="属性访问操作getattrsetattr以及delattr函数">属性访问操作，getattr()，setattr()以及delattr()函数</h4>

<p>通常可以通过(.)操作符的形式去访问对象的属性。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">C</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="s">'RED'</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">C</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">x</span>
<span class="s">'RED'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="s">'x'</span><span class="p">,</span> <span class="s">'没有这个属性'</span><span class="p">)</span>
<span class="s">'RED'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="s">'y'</span><span class="p">,</span> <span class="s">'没有这个属性'</span><span class="p">)</span>
<span class="s">'没有这个属性'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">setattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="s">'y'</span><span class="p">,</span> <span class="s">'YELLOW'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="s">'y'</span><span class="p">,</span> <span class="s">'没有这个属性'</span><span class="p">)</span>
<span class="s">'YELLOW'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">delattr</span><span class="p">(</span><span class="n">c</span><span class="p">.</span> <span class="s">'x'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">x</span>
<span class="nb">AttributeError</span><span class="p">:</span> <span class="s">'C'</span> <span class="nb">object</span> <span class="n">has</span> <span class="n">no</span> <span class="n">attribute</span> <span class="s">'x'</span>
</code></pre></div></div>

<h4 id="property函数">property()函数</h4>

<p>代码如下，</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">calss</span> <span class="n">C</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">10</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">size</span>

    <span class="k">def</span> <span class="nf">getSize</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">size</span>

    <span class="k">def</span> <span class="nf">setSize</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">value</span>

    <span class="k">def</span> <span class="nf">delSize</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">del</span> <span class="bp">self</span><span class="p">.</span><span class="n">size</span>

    <span class="n">x</span> <span class="o">=</span> <span class="nb">property</span><span class="p">(</span><span class="n">getSize</span><span class="p">,</span> <span class="n">setSize</span><span class="p">,</span> <span class="n">delSize</span><span class="p">)</span>
</code></pre></div></div>

<p>程序实现如下，</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">C</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">x</span>
<span class="mi">10</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">12</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">x</span>
<span class="mi">12</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">size</span>
<span class="mi">12</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">del</span> <span class="n">c</span><span class="p">.</span><span class="n">x</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">size</span>
<span class="nb">AttributeError</span><span class="p">:</span> <span class="s">'C'</span> <span class="nb">object</span> <span class="n">has</span> <span class="n">no</span> <span class="n">attribute</span> <span class="s">'size'</span>
</code></pre></div></div>

<p>关于属性访问，有对应的魔法方法来管理，通过对这些魔法方法的重写，可以随心所欲地控制对象的属性访问。</p>

<p>下表列举了属性相关的魔法方法。</p>

<table>
  <thead>
    <tr>
      <th>魔法方法</th>
      <th>含义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>__getattr__(self, name)</td>
      <td>定义当用户试图获取一个不存在的属性时的行为</td>
    </tr>
    <tr>
      <td>__getattribute__(self, name)</td>
      <td>定义当该类的属性被访问时的行为</td>
    </tr>
    <tr>
      <td>__setattr__(self, name, value)</td>
      <td>定义当一个属性被设置时的行为</td>
    </tr>
    <tr>
      <td>__delattr__(self, name)</td>
      <td>定义当一个属性被删除时的行为</td>
    </tr>
  </tbody>
</table>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">C</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__getatrribute__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'getattribute'</span><span class="p">)</span>
        <span class="c1"># 使用super()调用object基类的__getattribute__()方法
</span>        <span class="k">return</span> <span class="nb">super</span><span class="p">().</span><span class="n">__getattribute__</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__setattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'setattr'</span><span class="p">)</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__delattr__</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'getattr'</span><span class="p">)</span>
</code></pre></div></div>

<p>程序实现如下，</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">C</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">x</span>
<span class="n">getattribute</span>  <span class="c1">#首先该类的属性被访问
</span><span class="nb">getattr</span>       <span class="c1">#然后用户试图获取一个不存在的属性
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>
<span class="nb">setattr</span>       <span class="c1">#定义当一个属性被设置时
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">x</span>
<span class="n">getattriburte</span>
<span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">del</span> <span class="n">c</span><span class="p">.</span><span class="n">x</span>   <span class="c1">#当一个属性被删除时
</span><span class="nb">delattr</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">setattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="s">'y'</span><span class="p">,</span> <span class="s">'Yellow'</span><span class="p">)</span>
<span class="nb">setattr</span>
</code></pre></div></div>

<h4 id="属性相关魔法方法的死循环陷阱">属性相关魔法方法的死循环陷阱</h4>

<p>代码为例，写一个矩形类，默认有宽和高两个属性；如果为一个叫square的属性赋值，那么说明这是一个正方形，值就是正方形的边长，此时宽和高都应该等于边长。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Rectangle</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="mi">0</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">width</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">height</span>
    
    <span class="k">def</span> <span class="nf">__setattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="s">'square'</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">value</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">value</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">value</span>

    <span class="k">def</span> <span class="nf">getArea</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="bp">self</span><span class="p">.</span><span class="n">height</span>
</code></pre></div></div>
<p>这个代码会出现无限递归，问题出在在第一次执行初始化方法时，<code class="language-plaintext highlighter-rouge">self.width = width</code>调用了__setattr__()方法，在进入__setattr__()后，执行<code class="language-plaintext highlighter-rouge">self.width = value</code>再次调用了__setattr__()方法，继而陷入无限递归。</p>

<p>解决这个问题有两个办法：</p>

<ol>
  <li>使用super()函数来调用基类的__setattr__()<br />
代码如下，<br />
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">super</span><span class="p">().</span><span class="n">__setattr__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>另一种方法就是给特殊属性__dict__赋值。对象有一个特殊的属性，成为__dict__，它的作用是以字典的形式显示出当前对象的所有属性以及相对应的值：<br />
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">r1</span><span class="p">.</span><span class="n">__dict__</span>
<span class="p">{</span><span class="s">'height'</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="s">'width'</span><span class="p">:</span> <span class="mi">10</span><span class="p">}</span>
</code></pre></div>    </div>
    <p>代码如下，</p>
  </li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">else</span><span class="p">:</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">__dict__</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</code></pre></div></div>

<p>一般，第一种方法更为常用，即使用super()函数来调用基类的__setattr__()。</p>

<blockquote>
  <p>问题(1)，推断以下代码会显示什么？</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">C</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">def</span> <span class="nf">__getattribute__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
        <span class="k">def</span> <span class="nf">__setattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
        <span class="k">def</span> <span class="nf">__delattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">C</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>
<span class="c1"># 位置1， 请问这里会显示什么？
</span><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">x</span><span class="p">)</span>
<span class="c1"># 位置2， 请问这里会显示什么？
</span></code></pre></div></div>

<p>位置1，在c实例化后，由于对c的x属性进行了设置，所以调用了__setattr__()方法，所以打印3。</p>

<p>位置2，因为要访问实例c的x属性，所以会调用__getattribute__()方法，由于改写了该方法，所以只打印2，而且由于未设定返回值，所以打印None。</p>

<blockquote>
  <p>问题(2)，推断一下代码会显示什么？</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">C</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">__getatrr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
            <span class="k">return</span> <span class="nb">super</span><span class="p">().</span><span class="n">__getattr__</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
        <span class="k">def</span> <span class="nf">__getattribute__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
            <span class="k">print</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
            <span class="k">return</span> <span class="nb">super</span><span class="p">().</span><span class="n">__getattribute__</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
        <span class="k">def</span> <span class="nf">__setattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
            <span class="nb">super</span><span class="p">().</span><span class="n">__setattr__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
        <span class="k">def</span> <span class="nf">__delattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
            <span class="nb">super</span><span class="p">().</span><span class="n">__delattr__</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">C</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">x</span>
</code></pre></div></div>
<p>显示，</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">2</span>
<span class="mi">1</span>
<span class="n">AtrributeError</span><span class="p">:</span> <span class="s">'super'</span> <span class="nb">object</span> <span class="n">has</span> <span class="n">no</span> <span class="n">attribute</span> <span class="s">'__getattr__'</span>
</code></pre></div></div>
<p>分析：<br />
首先c.x会先调用__getattribute__()魔法方法，打印2；然后调用super().__getattribute__()，找不到属性名x，因此会紧接着调用__getattr__()，于是打印1；但是需要注意的是，super()并没有__getattr__()，下面为super的方法：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nb">dir</span><span class="p">(</span><span class="nb">super</span><span class="p">)</span>
<span class="p">[</span><span class="s">'__class__'</span><span class="p">,</span> <span class="s">'__delattr__'</span><span class="p">,</span> <span class="s">'__dir__'</span><span class="p">,</span> <span class="s">'__doc__'</span><span class="p">,</span> <span class="s">'__eq__'</span><span class="p">,</span> <span class="s">'__format__'</span><span class="p">,</span> <span class="s">'__ge__'</span><span class="p">,</span> <span class="s">'__get__'</span><span class="p">,</span> <span class="s">'__getattribute__'</span><span class="p">,</span> <span class="s">'__gt__'</span><span class="p">,</span> <span class="s">'__hash__'</span><span class="p">,</span> <span class="s">'__init__'</span><span class="p">,</span> <span class="s">'__le__'</span><span class="p">,</span> <span class="s">''</span><span class="n">__lt__</span><span class="p">,</span> <span class="s">'__ne__'</span><span class="p">,</span> <span class="s">'__new__'</span><span class="p">,</span> <span class="s">'__reduce__'</span><span class="p">,</span> <span class="s">'__reduce_ex__'</span><span class="p">,</span> <span class="s">'__repr__'</span><span class="p">,</span> <span class="s">'__self__'</span><span class="p">,</span> <span class="s">'__self_class__'</span><span class="p">,</span> <span class="s">'__setattr__'</span><span class="p">,</span> <span class="s">'__sizeof__'</span><span class="p">,</span> <span class="s">'__str__'</span><span class="p">,</span> <span class="s">'__subclasshook__'</span><span class="p">,</span> <span class="s">'__thisclass__'</span><span class="p">]</span>
</code></pre></div></div>

<blockquote>
  <p>问题(3) 指出下面代码的问题，</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Counter</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">def</span> <span class="nf">__setattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__setattr__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">__delattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">counter</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__delattr__</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</code></pre></div></div>
<p>下面来分析一下程序运行，首先当代码执行到<code class="language-plaintext highlighter-rouge">self.counter = 0</code>，由于初始化方法中没有counter这个属性，所以会调用<code class="language-plaintext highlighter-rouge">__setattr__()</code>方法，但是由于在初始化方法中并没有定义self.counter属性，所以在<code class="language-plaintext highlighter-rouge">__selfattr__()</code>执行的<code class="language-plaintext highlighter-rouge">self.counter += 1</code>就无法正确实现<code class="language-plaintext highlighter-rouge">+= 1</code>。</p>

<blockquote>
  <p>问题(4) 按要求重写魔法方法：当访问一个不存在的属性时，不报错切提示”该属性不存在！”</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Demo</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
            <span class="k">return</span> <span class="s">'该属性不存在'</span>


<span class="o">&gt;&gt;&gt;</span> <span class="n">demo</span> <span class="o">=</span> <span class="n">Demo</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">demo</span><span class="p">.</span><span class="n">x</span>
<span class="sb">`该属性不存在！`</span>
</code></pre></div></div>

<blockquote>
  <p>问题(5) 编写Demo类，使得下面代码可以正常运行：</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">demo</span> <span class="o">=</span> <span class="n">Demo</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">demo</span><span class="p">.</span><span class="n">x</span>
<span class="s">'FishC'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">demo</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="s">"X-man"</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">demo</span><span class="p">.</span><span class="n">x</span>
<span class="s">'X-man'</span>
</code></pre></div></div>
<p>代码如下：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Demo</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">'FishC'</span>
            <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">name</span>
</code></pre></div></div>

<blockquote>
  <p><strong>问题(6) 编写一个Counter类，用于实时监测对象有多少个属性。</strong></p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">counter</span>
<span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">z</span> <span class="o">=</span> <span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">counter</span>
<span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">del</span> <span class="n">c</span><span class="p">.</span><span class="n">x</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">counter</span>
<span class="mi">2</span>
</code></pre></div></div>

<p>代码如下，</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Counter</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__setattr__</span><span class="p">(</span><span class="s">'counter'</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1"># 调用基类的不用添加self指针了
</span>
    <span class="k">def</span> <span class="nf">__setattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__setattr__</span><span class="p">(</span><span class="s">'counter'</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">counter</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__setattr__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__delattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__setattr__</span><span class="p">(</span><span class="s">'counter'</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">counter</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__delattr__</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</code></pre></div></div>

:ET